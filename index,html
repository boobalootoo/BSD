<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Brighton Services Directory</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .subcategory-container { display: none; }
        .subcategory-container.active { display: grid; }
        .cat-active { outline: 3px solid rgba(59,130,246,.6); }
        .loading-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 50vh;
        }
        #map { height: 400px; margin-top: 20px; border-radius: 12px; }
    </style>
</head>
<body class="flex flex-col min-h-screen">
    <!-- Header -->
    <header class="bg-white sticky top-0 z-50 shadow-sm p-4 flex items-center justify-between">
        <h1 class="text-2xl md:text-3xl font-bold text-gray-800">
            <i class="fa-solid fa-hand-holding-heart text-blue-600 mr-2"></i>
            Brighton Services Directory
        </h1>
        <a href="tel:999" class="bg-red-600 text-white rounded-full p-3 md:p-4 text-xl font-bold uppercase shadow-lg hover:bg-red-700 transition-colors duration-200" aria-label="Emergency Services 999">
            999
        </a>
    </header>

    <!-- Main -->
    <main class="flex-1 p-4 pb-24 md:p-6">
        <div class="max-w-4xl mx-auto">
            <div id="loading-spinner" class="loading-container">
                <svg class="animate-spin -ml-1 mr-3 h-10 w-10 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            </div>

            <!-- Filters -->
            <section class="mb-6">
                <h2 class="text-lg font-semibold text-gray-700 mb-2">Filters</h2>
                <div id="filter-container" class="grid grid-cols-2 sm:grid-cols-3 gap-2"></div>
            </section>

            <!-- Categories -->
            <section class="mb-6">
                <h2 class="text-lg font-semibold text-gray-700 mb-2">Categories</h2>
                <div id="category-container" class="grid grid-cols-2 sm:grid-cols-4 gap-4 md:gap-6"></div>
                <div id="subcategory-containers"></div>
            </section>

            <!-- Services -->
            <section>
                <h2 class="text-lg font-semibold text-gray-700 mb-2">Services</h2>
                <div id="services-list" class="space-y-4"></div>
                <div id="no-services" class="hidden text-center text-gray-500 mt-8">
                    <i class="fa-solid fa-face-sad-cry text-4xl mb-2"></i>
                    <p class="text-lg font-medium">No services match your criteria.</p>
                </div>
            </section>
            
            <!-- Map -->
            <section>
                <h2 class="text-lg font-semibold text-gray-700 mt-6 mb-2">Map</h2>
                <div id="map"></div>
            </section>
        </div>
    </main>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // --- DOM refs ------------------------------------------------------------
            const filterContainer = document.getElementById("filter-container");
            const categoryContainer = document.getElementById("category-container");
            const subcategoryContainers = document.getElementById("subcategory-containers");
            const servicesList = document.getElementById("services-list");
            const noServicesMessage = document.getElementById("no-services");
            const loadingSpinner = document.getElementById('loading-spinner');

            // --- State -----------------------------------------------------------
            let allServices = []; // This will hold the data from the CSV
            let activeFilters = new Set();
            let activeCategory = null;
            let activeSubcategory = null;

            // --- Map Initialization ---------------------------------------------
            const map = L.map("map").setView([50.828, -0.14], 13);
            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                attribution: "&copy; OpenStreetMap contributors"
            }).addTo(map);
            let markers = [];

            const categoryMarkerIcons = {
                "Health": { icon: "fa-solid fa-heart-pulse", color: "text-red-500", bg: "bg-red-100" },
                "Food": { icon: "fa-solid fa-bread-slice", color: "text-orange-500", bg: "bg-orange-100" },
                "Accommodation": { icon: "fa-solid fa-house-chimney", color: "text-purple-500", bg: "bg-purple-100" },
                "Help into Work": { icon: "fa-solid fa-briefcase", color: "text-green-500", bg: "bg-green-100" },
                "Financial": { icon: "fa-solid fa-sack-dollar", color: "text-yellow-500", bg: "bg-yellow-100" },
                "Family": { icon: "fa-solid fa-people-group", color: "text-blue-500", bg: "bg-blue-100" },
                "Legal": { icon: "fa-solid fa-scale-balanced", color: "text-gray-500", bg: "bg-gray-100" },
                "Community": { icon: "fa-solid fa-hands-holding-child", color: "text-teal-500", bg: "bg-teal-100" },
                "General": { icon: "fa-solid fa-circle-info", color: "text-lime-500", bg: "bg-lime-100" }
            };

            const subcategoryMarkerIcons = {
                "Physical Health": { icon: "fa-solid fa-person", color: "text-red-500", bg: "bg-red-100" },
                "Mental Health": { icon: "fa-solid fa-brain", color: "text-red-500", bg: "bg-red-100" },
                "Meal Service": { icon: "fa-solid fa-utensils", color: "text-orange-500", bg: "bg-orange-100" },
                "Shopping": { icon: "fa-solid fa-cart-shopping", color: "text-orange-500", bg: "bg-orange-100" },
                "Emergency Shelter": { icon: "fa-solid fa-bed", color: "text-purple-500", bg: "bg-purple-100" },
                "Employment Support": { icon: "fa-solid fa-user-tie", color: "text-green-500", bg: "bg-green-100" }
            };

            function makeDivIcon(opts) {
                return L.divIcon({
                    className: "",
                    html: `<div class="w-10 h-10 flex items-center justify-center rounded-full shadow ${opts.bg}"><i class="${opts.icon} ${opts.color} text-lg"></i></div>`,
                    iconSize: [40, 40],
                    iconAnchor: [20, 20],
                    popupAnchor: [0, -22]
                });
            }

            function updateMap(filtered) {
                markers.forEach(m => map.removeLayer(m));
                markers = [];

                filtered.forEach(s => {
                    const iconSpec = subcategoryMarkerIcons[s.subCategory] || categoryMarkerIcons[s.category];
                    if (!iconSpec || !s.lat || !s.lng) return;
                    const divIcon = makeDivIcon(iconSpec);
                    const marker = L.marker([s.lat, s.lng], { icon: divIcon })
                        .bindPopup(`
                            <div class="font-semibold">${s.title}</div>
                            <div class="text-sm text-gray-600">${s.category} Â· ${s.subCategory || ""}</div>
                            <div class="text-sm mt-1">${s.description}</div>
                            <div class="mt-2 text-sm">
                                <i class="fa-solid fa-phone mr-1"></i>
                                <a href="tel:${s.contact.replace(/\s/g,"")}" class="text-blue-600 hover:underline">${s.contact}</a>
                            </div>
                        `).addTo(map);
                    markers.push(marker);
                });

                if (markers.length > 0) {
                    const group = L.featureGroup(markers);
                    map.fitBounds(group.getBounds().pad(0.3));
                }
            }
            
            // --- Fetch and Parse CSV ------------------------------------------------
            async function fetchAndParseData() {
                loadingSpinner.classList.remove('hidden');
                const csvUrl = 'https://raw.githubusercontent.com/boobalootoo/BSD/main/info.csv';
                
                try {
                    const response = await fetch(csvUrl);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const csvText = await response.text();
                    allServices = parseCSV(csvText);
                    populateFiltersAndCategories();
                    renderServices();
                } catch (error) {
                    console.error("Failed to load services:", error);
                    servicesList.innerHTML = '<p class="text-center text-red-500 col-span-full">Failed to load services. Please check the network connection.</p>';
                } finally {
                    loadingSpinner.classList.add('hidden');
                }
            }

            function parseCSV(text) {
                const rows = text.trim().split('\n');
                const keys = ['orgname', 'address number', 'street name', 'postcode', 'opening times', 'phone number', 'email', 'website', 'who they help', 'category', 'subcategory', 'description', 'latitude', 'longitude'];
                
                return rows.slice(1).map((row, index) => {
                    const values = row.split(',').map(value => value.trim());
                    const obj = {};
                    keys.forEach((key, i) => {
                        obj[key] = values[i] || '';
                    });
                    
                    return {
                        id: index + 1,
                        category: obj.category,
                        subCategory: obj.subcategory,
                        title: obj.orgname,
                        description: obj.description,
                        contact: obj['phone number'],
                        filters: obj['who they help'] ? obj['who they help'].split(',').map(f => f.trim()) : [],
                        lat: parseFloat(obj.latitude),
                        lng: parseFloat(obj.longitude),
                    };
                });
            }

            // --- Dynamic UI Population ----------------------------------------------
            function populateFiltersAndCategories() {
                const allFilters = new Set();
                const allCategories = new Set();
                const allSubcategories = new Map();

                allServices.forEach(s => {
                    s.filters.forEach(f => allFilters.add(f));
                    allCategories.add(s.category);
                    if (s.subCategory) {
                        if (!allSubcategories.has(s.category)) {
                            allSubcategories.set(s.category, new Set());
                        }
                        allSubcategories.get(s.category).add(s.subCategory);
                    }
                });

                // Populate filters
                filterContainer.innerHTML = '';
                [...allFilters].sort().forEach(f => {
                    const label = document.createElement("label");
                    label.className = "flex items-center gap-2 bg-white p-2 rounded shadow cursor-pointer";
                    const input = document.createElement("input");
                    input.type = "checkbox"; input.value = f;
                    input.addEventListener("change", renderServices);
                    const span = document.createElement("span"); span.textContent = f;
                    label.appendChild(input); label.appendChild(span);
                    filterContainer.appendChild(label);
                });

                // Populate categories
                categoryContainer.innerHTML = '';
                [...allCategories].sort().forEach(cat => {
                    const iconSpec = categoryMarkerIcons[cat] || { icon: "fa-solid fa-question-circle", color: "text-gray-500", bg: "bg-gray-100" };
                    const btn = document.createElement("button");
                    btn.className = "category-btn bg-white rounded-xl shadow-md p-4 text-center hover:scale-105 transition";
                    btn.dataset.category = cat;
                    btn.innerHTML = `<i class="${iconSpec.icon} text-4xl ${iconSpec.color} mb-2"></i><span class="block font-medium">${cat}</span>`;
                    btn.addEventListener("click", () => {
                        document.querySelectorAll(".category-btn").forEach(b => b.classList.remove("cat-active"));
                        btn.classList.add("cat-active");
                        activeCategory = cat;
                        activeSubcategory = null;
                        document.querySelectorAll(".subcategory-container").forEach(el => el.classList.remove("active"));
                        document.getElementById("subcategories-" + activeCategory)?.classList.add("active");
                        renderServices();
                    });
                    categoryContainer.appendChild(btn);
                });

                // Populate subcategory containers
                subcategoryContainers.innerHTML = '';
                allSubcategories.forEach((subs, cat) => {
                    const subContainer = document.createElement("div");
                    subContainer.id = `subcategories-${cat}`;
                    subContainer.className = "subcategory-container grid-cols-2 gap-4 mt-4";
                    [...subs].sort().forEach(sub => {
                        const iconSpec = subcategoryMarkerIcons[sub] || categoryMarkerIcons[cat] || { icon: "fa-solid fa-question-circle", color: "text-gray-500", bg: "bg-gray-100" };
                        const subBtn = document.createElement("button");
                        subBtn.className = "subcategory-btn bg-white rounded-xl shadow p-4 text-center";
                        subBtn.dataset.subcategory = sub;
                        subBtn.innerHTML = `<i class="${iconSpec.icon} text-3xl ${iconSpec.color} mb-2"></i><span>${sub}</span>`;
                        subBtn.addEventListener("click", () => {
                            document.querySelectorAll(`#subcategories-${activeCategory} .subcategory-btn`).forEach(b => b.classList.remove("cat-active"));
                            subBtn.classList.add("cat-active");
                            activeSubcategory = sub;
                            renderServices();
                        });
                        subContainer.appendChild(subBtn);
                    });
                    subcategoryContainers.appendChild(subContainer);
                });
            }

            // --- Render services and map ------------------------------------------------
            function renderServices() {
                const checkedFilters = new Set(Array.from(filterContainer.querySelectorAll("input[type=checkbox]:checked")).map(el => el.value));
                
                const filteredList = allServices.filter(s => {
                    if (activeCategory && s.category !== activeCategory) return false;
                    if (activeSubcategory && s.subCategory !== activeSubcategory) return false;
                    if (checkedFilters.size > 0) {
                        return [...checkedFilters].every(f => s.filters.includes(f));
                    }
                    return true;
                });
                
                servicesList.innerHTML = "";
                if (filteredList.length === 0) {
                    noServicesMessage.classList.remove("hidden");
                } else {
                    noServicesMessage.classList.add("hidden");
                    filteredList.forEach(s => {
                        const card = document.createElement("div");
                        card.className = "bg-white rounded-xl shadow p-4 flex items-start gap-4 transition-transform transform hover:scale-[1.01]";
                        const listIconSpec = subcategoryMarkerIcons[s.subCategory] || categoryMarkerIcons[s.category] || { icon: "fa-solid fa-question-circle", color: "text-gray-500", bg: "bg-gray-100" };
                        card.innerHTML = `
                            <div class="w-12 h-12 flex items-center justify-center rounded-full ${listIconSpec.bg}">
                                <i class="${listIconSpec.icon} ${listIconSpec.color} text-xl"></i>
                            </div>
                            <div>
                                <h3 class="font-bold text-lg text-gray-800">${s.title}</h3>
                                <p class="text-sm text-gray-500 mb-1">${s.category}${s.subCategory ? " Â· " + s.subCategory : ""}</p>
                                <p class="text-gray-700 mb-2">${s.description}</p>
                                <a href="tel:${s.contact.replace(/\s/g,"")}" class="text-sm text-blue-600 hover:underline">
                                    <i class="fa-solid fa-phone mr-1"></i>${s.contact}
                                </a>
                            </div>
                        `;
                        servicesList.appendChild(card);
                    });
                }
                updateMap(filteredList);
            }

            // Initial data fetch and render
            fetchAndParseData();

        });
    </script>
</body>
</html>
